
# # ----------------------------------------------------------------
# # Course: EECS 110, Northwestern University
# # Term: Winter 2019
# # Autogenerated from: "../lectures/lecture_03/04. Built-In Functions.ipynb"
# # 
# # Note: Each example is commented out. To uncomment, highlight
# # the area you want to uncomment and type "cmd /" (which both adds
# # and removes comments).
# # ----------------------------------------------------------------




# # --------------------------------------------------------------------------------
# # # FUNCTIONS
# # --------------------------------------------------------------------------------




# # --------------------------------------------------------------------------------
# # ## 2. Built-In Functions
# # Python has a number of built-in functions and classes, which can be found by reading the Python 3.x reference guide: https://docs.python.org/3/library/functions.html. A few of the more useful ones are listed below. Note, when reading the documentation, there are a number of conventions that are important to understand:
# # 
# # 1. arguments with brackets around them indicate that they are optional.

# # --------------------------------------------------------------------------------




# # --------------------------------------------------------------------------------
# # | Name | Description |
# # |--|--|
# # | [print()](#print) | Prints one or more objects to the screen. |
# # | [dir()](#dir) | Tells you a list of valid attributes for the object or type you pass in as an argument. Very useful for learning the different kinds of data or build-in functions are associated with the object. |
# # | [type()](#type) | Tells you what kind of data type a particular object is. |
# # | [len()](#len) | Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection. |
# # | [input()](#input) | Prompts the user for an input, reads a line from the user's input, and converts the input to a string. |
# # | [str()](#str) | Returns a string version of an object. |
# # | [float()](#float) | Returns a float version of a number or string (if it can). |
# # | [int()](#int) | Returns a int version of a number or string (if it can).  |
# # | [bool()](#bool) | Returns a bool version of an expression (if it can).  |
# # --------------------------------------------------------------------------------




# # --------------------------------------------------------------------------------
# # ###  Some frequently used built-in functions and classes are described below
# # --------------------------------------------------------------------------------




# # --------------------------------------------------------------------------------
# # ### print
# # Prints one or more objects to the screen.
# # --------------------------------------------------------------------------------

# # print a single argument:
# print('Hi there')
# # print multiple arguments with a space in between each argument:
# print('Hello', 'how', 'are', 'you', 'doing', '?')
# print('The answer is:', 22)



# # --------------------------------------------------------------------------------
# # ### dir
# # * No arguments: returns the list of names in the current local scope.
# # * With 1 argument: Tells you a list of valid attributes for the object or type you pass in as an argument. 
# # This function is very useful for learning the different kinds of data or build-in functions are associated with the object. 
# # --------------------------------------------------------------------------------

# # note: this function tells me some of the possible methods that are associated with the print object.
# message = 'Hello World!!!  \nThis is an important message.'
# print(dir('  Hello  '))
# # from the dir function above, I now know that I can use the following 
# # string methods. Therefore, dir is a convenient way to understand the
# # kind of object you have and what you can do with it.
# print('\nlower():', message.lower())
# print('\nupper():', message.upper())
# print('\nstrip():', message.strip())
# print('\nsplitlines():', message.splitlines())
# print(dir(3.5))
# print(dir(3))



# # --------------------------------------------------------------------------------
# # ### type
# # Tells you what kind of data type a particular object is.
# # --------------------------------------------------------------------------------

# print(type(3))
# print(type(3.5))
# print(type(True))
# print(type('Hello'))
# print(type(type))



# # --------------------------------------------------------------------------------
# # ### len
# # Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection.
# # --------------------------------------------------------------------------------

# print(len('Hello world'))  # length of a string
# print(len([1, 2, 3, 4, 5]))  # length of a list
# print(len({'a': 1, 'b': 2, 'c': 3}))  # length of a dictionary



# # --------------------------------------------------------------------------------
# # ### input
# # Prompts the user for an input, reads a line from the user's input, and converts the input to a string.
# # --------------------------------------------------------------------------------

# answer = input('How old are you? ')
# print(answer)



# # --------------------------------------------------------------------------------
# # ### str
# # Returns a string version of an object. 
# # --------------------------------------------------------------------------------

# print(str(1))
# print(str(1.5))
# print(str(True))
# print(str(dir))
# print(str(int))
# print(str(len))



# # --------------------------------------------------------------------------------
# # ### float
# # Returns a float version of a number or string (if it can).
# # --------------------------------------------------------------------------------

# print(float('2.99'))
# print(float('-4E8'))  # same as -4.0 * 10 ** 8
# print(-4.0 * 10 ** 8)
# print(float(2))



# # --------------------------------------------------------------------------------
# # ### int
# # Returns a int version of a number or string (if it can). 
# # --------------------------------------------------------------------------------

# print(int(True))
# print(int(2.99))
# # print(int('2.99'))  # this does not work
# print(int('2'))
# # print(int('hi'))  # this does not work



# # --------------------------------------------------------------------------------
# # ### bool
# # Returns a bool version of an expression (if it can).
# # --------------------------------------------------------------------------------

# print(bool(1))
# print(bool('True'))
# print(bool(True))
# print(bool('False')) # non-empty things get converted to True
# print(bool([33]))  # non-empty things get converted to True
# print(bool(False)) 
# print(bool(None))  # empty things get converted to False
# print(bool(0))     # 0 gets converted to False
# print(bool([]))  # empty things get converted to False
