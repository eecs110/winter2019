
# # ----------------------------------------------------------------
# # Course: EECS 110, Northwestern University
# # Term: Winter 2019
# # Autogenerated from: "../lectures/lecture_02/02. Primitives Data Types.ipynb"
# # 
# # Note: Each example is commented out. To uncomment, highlight
# # the area you want to uncomment and type "cmd /" (which both adds
# # and removes comments).
# # ----------------------------------------------------------------




# # --------------------------------------------------------------------------------
# # # PRIMITIVE DATA TYPES
# # --------------------------------------------------------------------------------




# # --------------------------------------------------------------------------------
# # ## Example 1: Numbers
# # A sample of int and float data types, and some of the legal operations.
# # --------------------------------------------------------------------------------

# print(10 * 4)
# print(100)      # int 
# print(10 / 3)  # float
# print(10 / 2)  # still a float -- dividing 2 numbers is always a float
# print(2 ** 4)  # exponent
# print(8675309 ** 890)     # Really big number!
# print(.12345678901234567890123456789)
# print(30 / 400)
# print(30 / 4000000000)
# print(9 ** 0.5)  # square root of 9
# print(13 ** 0.5)
# print((13 ** 0.5) ** 2)  # square root of 13 squared (not quite the original, but close)
# print(float(3))
# print(int(6.75))  # note: doesn't round, but truncates



# # --------------------------------------------------------------------------------
# # ## Example 2: Strings
# # --------------------------------------------------------------------------------

# print('Flavor')
# print('any snippet of text')
# print('2' + 'xyz')    # concatenation
# print('2' + '2')  # how would you get this to calculate the sum of 2 + 2?
# print('straw' + 'berry')
# print('two ' + 'words')  # don't forget the space!
# print('I rule. ' * 50)
# # Note: this will produce an error because you can't add a number and a string together
# # uncomment the line below to see what happens:
# # print(2 + 'x')
# # Note: this will produce an error because the apostrophe is not escaped.
# # uncomment the line below to see what happens:
# # print('I'm a programmer!')
# # In this example, the apostrophe is properly escaped with a backslash character.
# print('I\'m a programmer!')
# print('Here is a sentance without a newline character (\\n).')
# # Note: two \n newline characters.
# print('Here is a sentance with\ntwo new\nline characters (\\n).')



# # --------------------------------------------------------------------------------
# # ## Example 3: Booleans
# # --------------------------------------------------------------------------------

# print(True)
# print(123 == 123)  # expression that evaluates to true using comparison operator (==, >, <, >=, <=, etc.)
# print(123 == 124)  # expression that evaluates to false using comparison operator
# print(True and False)  # expression that evaluates to false using logical operator (and, or, not)
# print(True or False)
# print(123 == 123 and 123 == 124) # you can combine expressions using logical operators
# print(123 == 123 or 123 == 124)
# print(True + True + True)  # True converts to the value 1 (you will rarely do this)
# print(False + False)  # True converts to the value 0
# print(True > False)
# print(False or False)
# print(False and False)
# print(False and True)
# print(not False)
# print(not True)



# # --------------------------------------------------------------------------------
# # ## Example 4: Detecting data types
# # --------------------------------------------------------------------------------

# print(type(2.3))
# print(type(100))
# print(type('abcd'))
# a = 5.7
# print(type(a))
# print(type(True))
# print(type(0))
# print(type (123 == 124))
# print(type(123 == 123 and 123 == 124))



# # --------------------------------------------------------------------------------
# # ## Example 5: Converting between data types
# # --------------------------------------------------------------------------------

# print(float('2.3'))  # converts a string to a float
# print(str(2))
# print(int('2'))
# # print(int('2.5'))  # this will throw an error. Give it a try.
# print(str(['3', '2']))
# print(int(True))
# print(int(0))
# print(bool(None))
# print(bool(0))  # 0 is also used to denote false
# print(bool(1))  # 1 is also used to denote true
# print(bool('Hey there!'))  # any non-zero or non-null value converts to true